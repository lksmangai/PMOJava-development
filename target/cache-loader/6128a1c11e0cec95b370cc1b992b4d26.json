{"remainingRequest":"F:\\25june\\PMQJava\\node_modules\\thread-loader\\dist\\cjs.js??ref--9-2!F:\\25june\\PMQJava\\node_modules\\ts-loader\\index.js??ref--9-3!F:\\25june\\PMQJava\\node_modules\\angular-router-loader\\src\\index.js!F:\\25june\\PMQJava\\node_modules\\tslint-loader\\index.js!F:\\25june\\PMQJava\\src\\main\\webapp\\app\\admin\\health\\health.component.ts","dependencies":[{"path":"F:\\25june\\PMQJava\\src\\main\\webapp\\app\\admin\\health\\health.component.ts","mtime":1561374566600},{"path":"F:\\25june\\PMQJava\\node_modules\\angular2-template-loader\\index.js","mtime":1486570058000},{"path":"F:\\25june\\PMQJava\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\25june\\PMQJava\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\25june\\PMQJava\\node_modules\\ts-loader\\index.js","mtime":1545640398000},{"path":"F:\\25june\\PMQJava\\node_modules\\angular-router-loader\\src\\index.js","mtime":1512749902000},{"path":"F:\\25june\\PMQJava\\node_modules\\tslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst tslib_1 = require(\"tslib\");\r\nvar _a, _b;\r\nconst core_1 = require(\"@angular/core\");\r\nconst ng_bootstrap_1 = require(\"@ng-bootstrap/ng-bootstrap\");\r\nconst health_service_1 = require(\"./health.service\");\r\nconst health_modal_component_1 = require(\"./health-modal.component\");\r\nlet JhiHealthCheckComponent = class JhiHealthCheckComponent {\r\n    constructor(modalService, healthService) {\r\n        this.modalService = modalService;\r\n        this.healthService = healthService;\r\n    }\r\n    ngOnInit() {\r\n        this.refresh();\r\n    }\r\n    baseName(name) {\r\n        return this.healthService.getBaseName(name);\r\n    }\r\n    getBadgeClass(statusState) {\r\n        if (statusState === 'UP') {\r\n            return 'badge-success';\r\n        }\r\n        else {\r\n            return 'badge-danger';\r\n        }\r\n    }\r\n    refresh() {\r\n        this.updatingHealth = true;\r\n        this.healthService.checkHealth().subscribe(health => {\r\n            this.healthData = this.healthService.transformHealthData(health);\r\n            this.updatingHealth = false;\r\n        }, error => {\r\n            if (error.status === 503) {\r\n                this.healthData = this.healthService.transformHealthData(error.error);\r\n                this.updatingHealth = false;\r\n            }\r\n        });\r\n    }\r\n    showHealth(health) {\r\n        const modalRef = this.modalService.open(health_modal_component_1.JhiHealthModalComponent);\r\n        modalRef.componentInstance.currentHealth = health;\r\n        modalRef.result.then(result => {\r\n            // Left blank intentionally, nothing to do here\r\n        }, reason => {\r\n            // Left blank intentionally, nothing to do here\r\n        });\r\n    }\r\n    subSystemName(name) {\r\n        return this.healthService.getSubSystemName(name);\r\n    }\r\n};\r\nJhiHealthCheckComponent = tslib_1.__decorate([\r\n    core_1.Component({\r\n        selector: 'jhi-health',\r\n        templateUrl: './health.component.html'\r\n    }),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof ng_bootstrap_1.NgbModal !== \"undefined\" && ng_bootstrap_1.NgbModal) === \"function\" ? _a : Object, typeof (_b = typeof health_service_1.JhiHealthService !== \"undefined\" && health_service_1.JhiHealthService) === \"function\" ? _b : Object])\r\n], JhiHealthCheckComponent);\r\nexports.JhiHealthCheckComponent = JhiHealthCheckComponent;\r\n",{"version":3,"file":"F:\\25june\\PMQJava\\src\\main\\webapp\\app\\admin\\health\\health.component.ts","sourceRoot":"","sources":["F:\\25june\\PMQJava\\node_modules\\angular-router-loader\\src\\index.js!F:\\25june\\PMQJava\\node_modules\\tslint-loader\\index.js!F:\\25june\\PMQJava\\src\\main\\webapp\\app\\admin\\health\\health.component.ts"],"names":[],"mappings":";;;;AAAA,wCAAkD;AAClD,6DAAsD;AAEtD,qDAAoD;AACpD,qEAAmE;AAMnE,IAAa,uBAAuB,GAApC,MAAa,uBAAuB;IAIlC,YAAoB,YAAsB,EAAU,aAA+B;QAA/D,iBAAY,GAAZ,YAAY,CAAU;QAAU,kBAAa,GAAb,aAAa,CAAkB;IAAG,CAAC;IAEvF,QAAQ;QACN,IAAI,CAAC,OAAO,EAAE,CAAC;IACjB,CAAC;IAED,QAAQ,CAAC,IAAY;QACnB,OAAO,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;IAC9C,CAAC;IAED,aAAa,CAAC,WAAW;QACvB,IAAI,WAAW,KAAK,IAAI,EAAE;YACxB,OAAO,eAAe,CAAC;SACxB;aAAM;YACL,OAAO,cAAc,CAAC;SACvB;IACH,CAAC;IAED,OAAO;QACL,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;QAE3B,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE,CAAC,SAAS,CACxC,MAAM,CAAC,EAAE;YACP,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;YACjE,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;QAC9B,CAAC,EACD,KAAK,CAAC,EAAE;YACN,IAAI,KAAK,CAAC,MAAM,KAAK,GAAG,EAAE;gBACxB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,mBAAmB,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;gBACtE,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;aAC7B;QACH,CAAC,CACF,CAAC;IACJ,CAAC;IAED,UAAU,CAAC,MAAW;QACpB,MAAM,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,gDAAuB,CAAC,CAAC;QACjE,QAAQ,CAAC,iBAAiB,CAAC,aAAa,GAAG,MAAM,CAAC;QAClD,QAAQ,CAAC,MAAM,CAAC,IAAI,CAClB,MAAM,CAAC,EAAE;YACP,+CAA+C;QACjD,CAAC,EACD,MAAM,CAAC,EAAE;YACP,+CAA+C;QACjD,CAAC,CACF,CAAC;IACJ,CAAC;IAED,aAAa,CAAC,IAAY;QACxB,OAAO,IAAI,CAAC,aAAa,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;IACnD,CAAC;CACF,CAAA;AAvDY,uBAAuB;IAJnC,gBAAS,CAAC;QACT,QAAQ,EAAE,YAAY;QACtB,WAAW,EAAE,yBAAyB;KACvC,CAAC;iEAKkC,uBAAQ,oBAAR,uBAAQ,oDAAyB,iCAAgB,oBAAhB,iCAAgB;GAJxE,uBAAuB,CAuDnC;AAvDY,0DAAuB","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\n\nimport { JhiHealthService } from './health.service';\nimport { JhiHealthModalComponent } from './health-modal.component';\n\n@Component({\n  selector: 'jhi-health',\n  templateUrl: './health.component.html'\n})\nexport class JhiHealthCheckComponent implements OnInit {\n  healthData: any;\n  updatingHealth: boolean;\n\n  constructor(private modalService: NgbModal, private healthService: JhiHealthService) {}\n\n  ngOnInit() {\n    this.refresh();\n  }\n\n  baseName(name: string) {\n    return this.healthService.getBaseName(name);\n  }\n\n  getBadgeClass(statusState) {\n    if (statusState === 'UP') {\n      return 'badge-success';\n    } else {\n      return 'badge-danger';\n    }\n  }\n\n  refresh() {\n    this.updatingHealth = true;\n\n    this.healthService.checkHealth().subscribe(\n      health => {\n        this.healthData = this.healthService.transformHealthData(health);\n        this.updatingHealth = false;\n      },\n      error => {\n        if (error.status === 503) {\n          this.healthData = this.healthService.transformHealthData(error.error);\n          this.updatingHealth = false;\n        }\n      }\n    );\n  }\n\n  showHealth(health: any) {\n    const modalRef = this.modalService.open(JhiHealthModalComponent);\n    modalRef.componentInstance.currentHealth = health;\n    modalRef.result.then(\n      result => {\n        // Left blank intentionally, nothing to do here\n      },\n      reason => {\n        // Left blank intentionally, nothing to do here\n      }\n    );\n  }\n\n  subSystemName(name: string) {\n    return this.healthService.getSubSystemName(name);\n  }\n}\n"]}]}