{"remainingRequest":"F:\\25june\\PMQJava\\node_modules\\thread-loader\\dist\\cjs.js??ref--9-2!F:\\25june\\PMQJava\\node_modules\\ts-loader\\index.js??ref--9-3!F:\\25june\\PMQJava\\node_modules\\angular-router-loader\\src\\index.js!F:\\25june\\PMQJava\\node_modules\\tslint-loader\\index.js!F:\\25june\\PMQJava\\src\\main\\webapp\\app\\entities\\user-contact\\user-contact-update.component.ts","dependencies":[{"path":"F:\\25june\\PMQJava\\src\\main\\webapp\\app\\entities\\user-contact\\user-contact-update.component.ts","mtime":1561379256374},{"path":"F:\\25june\\PMQJava\\node_modules\\angular2-template-loader\\index.js","mtime":1486570058000},{"path":"F:\\25june\\PMQJava\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\25june\\PMQJava\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\25june\\PMQJava\\node_modules\\ts-loader\\index.js","mtime":1545640398000},{"path":"F:\\25june\\PMQJava\\node_modules\\angular-router-loader\\src\\index.js","mtime":1512749902000},{"path":"F:\\25june\\PMQJava\\node_modules\\tslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst tslib_1 = require(\"tslib\");\r\nvar _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\r\nconst core_1 = require(\"@angular/core\");\r\nconst forms_1 = require(\"@angular/forms\");\r\nconst router_1 = require(\"@angular/router\");\r\nconst operators_1 = require(\"rxjs/operators\");\r\nconst ng_jhipster_1 = require(\"ng-jhipster\");\r\nconst user_contact_model_1 = require(\"app/shared/model/user-contact.model\");\r\nconst user_contact_service_1 = require(\"./user-contact.service\");\r\nconst qnow_user_1 = require(\"app/entities/qnow-user\");\r\nconst city_1 = require(\"app/entities/city\");\r\nconst state_master_1 = require(\"app/entities/state-master\");\r\nconst country_1 = require(\"app/entities/country\");\r\nconst group_members_1 = require(\"app/entities/group-members\");\r\nconst im_employee_1 = require(\"app/entities/im-employee\");\r\nlet UserContactUpdateComponent = class UserContactUpdateComponent {\r\n    constructor(jhiAlertService, userContactService, qnowUserService, cityService, stateMasterService, countryService, groupMembersService, imEmployeeService, activatedRoute, fb) {\r\n        this.jhiAlertService = jhiAlertService;\r\n        this.userContactService = userContactService;\r\n        this.qnowUserService = qnowUserService;\r\n        this.cityService = cityService;\r\n        this.stateMasterService = stateMasterService;\r\n        this.countryService = countryService;\r\n        this.groupMembersService = groupMembersService;\r\n        this.imEmployeeService = imEmployeeService;\r\n        this.activatedRoute = activatedRoute;\r\n        this.fb = fb;\r\n        this.editForm = this.fb.group({\r\n            id: [],\r\n            homePhone: [],\r\n            workPhone: [],\r\n            cellPhone: [],\r\n            permentAddress: [],\r\n            haLine1: [],\r\n            haLine2: [],\r\n            haPostal: [],\r\n            waLine1: [],\r\n            waLine2: [],\r\n            waPostal: [],\r\n            ucNote: [],\r\n            primaryRole: [],\r\n            secondaryRole: [],\r\n            initiative: [],\r\n            technology: [],\r\n            teamName: [],\r\n            qnowUser: [],\r\n            waCity: [],\r\n            haCity: [],\r\n            waState: [],\r\n            haState: [],\r\n            waCountry: [],\r\n            haCountry: [],\r\n            groupMembers: []\r\n        });\r\n    }\r\n    ngOnInit() {\r\n        this.isSaving = false;\r\n        this.activatedRoute.data.subscribe(({ userContact }) => {\r\n            this.updateForm(userContact);\r\n            this.userContact = userContact;\r\n        });\r\n        this.qnowUserService\r\n            .query({ 'userContactId.specified': 'false' })\r\n            .pipe(operators_1.filter((mayBeOk) => mayBeOk.ok), operators_1.map((response) => response.body))\r\n            .subscribe((res) => {\r\n            if (!this.userContact.qnowUser || !this.userContact.qnowUser.id) {\r\n                this.qnowusers = res;\r\n            }\r\n            else {\r\n                this.qnowUserService\r\n                    .find(this.userContact.qnowUser.id)\r\n                    .pipe(operators_1.filter((subResMayBeOk) => subResMayBeOk.ok), operators_1.map((subResponse) => subResponse.body))\r\n                    .subscribe((subRes) => (this.qnowusers = [subRes].concat(res)), (subRes) => this.onError(subRes.message));\r\n            }\r\n        }, (res) => this.onError(res.message));\r\n        this.cityService\r\n            .query()\r\n            .pipe(operators_1.filter((mayBeOk) => mayBeOk.ok), operators_1.map((response) => response.body))\r\n            .subscribe((res) => (this.cities = res), (res) => this.onError(res.message));\r\n        this.stateMasterService\r\n            .query()\r\n            .pipe(operators_1.filter((mayBeOk) => mayBeOk.ok), operators_1.map((response) => response.body))\r\n            .subscribe((res) => (this.statemasters = res), (res) => this.onError(res.message));\r\n        this.countryService\r\n            .query()\r\n            .pipe(operators_1.filter((mayBeOk) => mayBeOk.ok), operators_1.map((response) => response.body))\r\n            .subscribe((res) => (this.countries = res), (res) => this.onError(res.message));\r\n        this.groupMembersService\r\n            .query()\r\n            .pipe(operators_1.filter((mayBeOk) => mayBeOk.ok), operators_1.map((response) => response.body))\r\n            .subscribe((res) => (this.groupmembers = res), (res) => this.onError(res.message));\r\n        this.imEmployeeService\r\n            .query()\r\n            .pipe(operators_1.filter((mayBeOk) => mayBeOk.ok), operators_1.map((response) => response.body))\r\n            .subscribe((res) => (this.imemployees = res), (res) => this.onError(res.message));\r\n    }\r\n    updateForm(userContact) {\r\n        this.editForm.patchValue({\r\n            id: userContact.id,\r\n            homePhone: userContact.homePhone,\r\n            workPhone: userContact.workPhone,\r\n            cellPhone: userContact.cellPhone,\r\n            permentAddress: userContact.permentAddress,\r\n            haLine1: userContact.haLine1,\r\n            haLine2: userContact.haLine2,\r\n            haPostal: userContact.haPostal,\r\n            waLine1: userContact.waLine1,\r\n            waLine2: userContact.waLine2,\r\n            waPostal: userContact.waPostal,\r\n            ucNote: userContact.ucNote,\r\n            primaryRole: userContact.primaryRole,\r\n            secondaryRole: userContact.secondaryRole,\r\n            initiative: userContact.initiative,\r\n            technology: userContact.technology,\r\n            teamName: userContact.teamName,\r\n            qnowUser: userContact.qnowUser,\r\n            waCity: userContact.waCity,\r\n            haCity: userContact.haCity,\r\n            waState: userContact.waState,\r\n            haState: userContact.haState,\r\n            waCountry: userContact.waCountry,\r\n            haCountry: userContact.haCountry,\r\n            groupMembers: userContact.groupMembers\r\n        });\r\n    }\r\n    previousState() {\r\n        window.history.back();\r\n    }\r\n    save() {\r\n        this.isSaving = true;\r\n        const userContact = this.createFromForm();\r\n        if (userContact.id !== undefined) {\r\n            this.subscribeToSaveResponse(this.userContactService.update(userContact));\r\n        }\r\n        else {\r\n            this.subscribeToSaveResponse(this.userContactService.create(userContact));\r\n        }\r\n    }\r\n    createFromForm() {\r\n        const entity = Object.assign({}, new user_contact_model_1.UserContact(), { id: this.editForm.get(['id']).value, homePhone: this.editForm.get(['homePhone']).value, workPhone: this.editForm.get(['workPhone']).value, cellPhone: this.editForm.get(['cellPhone']).value, permentAddress: this.editForm.get(['permentAddress']).value, haLine1: this.editForm.get(['haLine1']).value, haLine2: this.editForm.get(['haLine2']).value, haPostal: this.editForm.get(['haPostal']).value, waLine1: this.editForm.get(['waLine1']).value, waLine2: this.editForm.get(['waLine2']).value, waPostal: this.editForm.get(['waPostal']).value, ucNote: this.editForm.get(['ucNote']).value, primaryRole: this.editForm.get(['primaryRole']).value, secondaryRole: this.editForm.get(['secondaryRole']).value, initiative: this.editForm.get(['initiative']).value, technology: this.editForm.get(['technology']).value, teamName: this.editForm.get(['teamName']).value, qnowUser: this.editForm.get(['qnowUser']).value, waCity: this.editForm.get(['waCity']).value, haCity: this.editForm.get(['haCity']).value, waState: this.editForm.get(['waState']).value, haState: this.editForm.get(['haState']).value, waCountry: this.editForm.get(['waCountry']).value, haCountry: this.editForm.get(['haCountry']).value, groupMembers: this.editForm.get(['groupMembers']).value });\r\n        return entity;\r\n    }\r\n    subscribeToSaveResponse(result) {\r\n        result.subscribe((res) => this.onSaveSuccess(), (res) => this.onSaveError());\r\n    }\r\n    onSaveSuccess() {\r\n        this.isSaving = false;\r\n        this.previousState();\r\n    }\r\n    onSaveError() {\r\n        this.isSaving = false;\r\n    }\r\n    onError(errorMessage) {\r\n        this.jhiAlertService.error(errorMessage, null, null);\r\n    }\r\n    trackQnowUserById(index, item) {\r\n        return item.id;\r\n    }\r\n    trackCityById(index, item) {\r\n        return item.id;\r\n    }\r\n    trackStateMasterById(index, item) {\r\n        return item.id;\r\n    }\r\n    trackCountryById(index, item) {\r\n        return item.id;\r\n    }\r\n    trackGroupMembersById(index, item) {\r\n        return item.id;\r\n    }\r\n    trackImEmployeeById(index, item) {\r\n        return item.id;\r\n    }\r\n    getSelected(selectedVals, option) {\r\n        if (selectedVals) {\r\n            for (let i = 0; i < selectedVals.length; i++) {\r\n                if (option.id === selectedVals[i].id) {\r\n                    return selectedVals[i];\r\n                }\r\n            }\r\n        }\r\n        return option;\r\n    }\r\n};\r\nUserContactUpdateComponent = tslib_1.__decorate([\r\n    core_1.Component({\r\n        selector: 'jhi-user-contact-update',\r\n        templateUrl: './user-contact-update.component.html'\r\n    }),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof ng_jhipster_1.JhiAlertService !== \"undefined\" && ng_jhipster_1.JhiAlertService) === \"function\" ? _a : Object, typeof (_b = typeof user_contact_service_1.UserContactService !== \"undefined\" && user_contact_service_1.UserContactService) === \"function\" ? _b : Object, typeof (_c = typeof qnow_user_1.QnowUserService !== \"undefined\" && qnow_user_1.QnowUserService) === \"function\" ? _c : Object, typeof (_d = typeof city_1.CityService !== \"undefined\" && city_1.CityService) === \"function\" ? _d : Object, typeof (_e = typeof state_master_1.StateMasterService !== \"undefined\" && state_master_1.StateMasterService) === \"function\" ? _e : Object, typeof (_f = typeof country_1.CountryService !== \"undefined\" && country_1.CountryService) === \"function\" ? _f : Object, typeof (_g = typeof group_members_1.GroupMembersService !== \"undefined\" && group_members_1.GroupMembersService) === \"function\" ? _g : Object, typeof (_h = typeof im_employee_1.ImEmployeeService !== \"undefined\" && im_employee_1.ImEmployeeService) === \"function\" ? _h : Object, typeof (_j = typeof router_1.ActivatedRoute !== \"undefined\" && router_1.ActivatedRoute) === \"function\" ? _j : Object, typeof (_k = typeof forms_1.FormBuilder !== \"undefined\" && forms_1.FormBuilder) === \"function\" ? _k : Object])\r\n], UserContactUpdateComponent);\r\nexports.UserContactUpdateComponent = UserContactUpdateComponent;\r\n",{"version":3,"file":"F:\\25june\\PMQJava\\src\\main\\webapp\\app\\entities\\user-contact\\user-contact-update.component.ts","sourceRoot":"","sources":["F:\\25june\\PMQJava\\node_modules\\angular-router-loader\\src\\index.js!F:\\25june\\PMQJava\\node_modules\\tslint-loader\\index.js!F:\\25june\\PMQJava\\src\\main\\webapp\\app\\entities\\user-contact\\user-contact-update.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { HttpResponse, HttpErrorResponse } from '@angular/common/http';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { JhiAlertService } from 'ng-jhipster';\nimport { IUserContact, UserContact } from 'app/shared/model/user-contact.model';\nimport { UserContactService } from './user-contact.service';\nimport { IQnowUser } from 'app/shared/model/qnow-user.model';\nimport { QnowUserService } from 'app/entities/qnow-user';\nimport { ICity } from 'app/shared/model/city.model';\nimport { CityService } from 'app/entities/city';\nimport { IStateMaster } from 'app/shared/model/state-master.model';\nimport { StateMasterService } from 'app/entities/state-master';\nimport { ICountry } from 'app/shared/model/country.model';\nimport { CountryService } from 'app/entities/country';\nimport { IGroupMembers } from 'app/shared/model/group-members.model';\nimport { GroupMembersService } from 'app/entities/group-members';\nimport { IImEmployee } from 'app/shared/model/im-employee.model';\nimport { ImEmployeeService } from 'app/entities/im-employee';\n\n@Component({\n  selector: 'jhi-user-contact-update',\n  templateUrl: './user-contact-update.component.html'\n})\nexport class UserContactUpdateComponent implements OnInit {\n  userContact: IUserContact;\n  isSaving: boolean;\n\n  qnowusers: IQnowUser[];\n\n  cities: ICity[];\n\n  statemasters: IStateMaster[];\n\n  countries: ICountry[];\n\n  groupmembers: IGroupMembers[];\n\n  imemployees: IImEmployee[];\n\n  editForm = this.fb.group({\n    id: [],\n    homePhone: [],\n    workPhone: [],\n    cellPhone: [],\n    permentAddress: [],\n    haLine1: [],\n    haLine2: [],\n    haPostal: [],\n    waLine1: [],\n    waLine2: [],\n    waPostal: [],\n    ucNote: [],\n    primaryRole: [],\n    secondaryRole: [],\n    initiative: [],\n    technology: [],\n    teamName: [],\n    qnowUser: [],\n    waCity: [],\n    haCity: [],\n    waState: [],\n    haState: [],\n    waCountry: [],\n    haCountry: [],\n    groupMembers: []\n  });\n\n  constructor(\n    protected jhiAlertService: JhiAlertService,\n    protected userContactService: UserContactService,\n    protected qnowUserService: QnowUserService,\n    protected cityService: CityService,\n    protected stateMasterService: StateMasterService,\n    protected countryService: CountryService,\n    protected groupMembersService: GroupMembersService,\n    protected imEmployeeService: ImEmployeeService,\n    protected activatedRoute: ActivatedRoute,\n    private fb: FormBuilder\n  ) {}\n\n  ngOnInit() {\n    this.isSaving = false;\n    this.activatedRoute.data.subscribe(({ userContact }) => {\n      this.updateForm(userContact);\n      this.userContact = userContact;\n    });\n    this.qnowUserService\n      .query({ 'userContactId.specified': 'false' })\n      .pipe(\n        filter((mayBeOk: HttpResponse<IQnowUser[]>) => mayBeOk.ok),\n        map((response: HttpResponse<IQnowUser[]>) => response.body)\n      )\n      .subscribe(\n        (res: IQnowUser[]) => {\n          if (!this.userContact.qnowUser || !this.userContact.qnowUser.id) {\n            this.qnowusers = res;\n          } else {\n            this.qnowUserService\n              .find(this.userContact.qnowUser.id)\n              .pipe(\n                filter((subResMayBeOk: HttpResponse<IQnowUser>) => subResMayBeOk.ok),\n                map((subResponse: HttpResponse<IQnowUser>) => subResponse.body)\n              )\n              .subscribe(\n                (subRes: IQnowUser) => (this.qnowusers = [subRes].concat(res)),\n                (subRes: HttpErrorResponse) => this.onError(subRes.message)\n              );\n          }\n        },\n        (res: HttpErrorResponse) => this.onError(res.message)\n      );\n    this.cityService\n      .query()\n      .pipe(\n        filter((mayBeOk: HttpResponse<ICity[]>) => mayBeOk.ok),\n        map((response: HttpResponse<ICity[]>) => response.body)\n      )\n      .subscribe((res: ICity[]) => (this.cities = res), (res: HttpErrorResponse) => this.onError(res.message));\n    this.stateMasterService\n      .query()\n      .pipe(\n        filter((mayBeOk: HttpResponse<IStateMaster[]>) => mayBeOk.ok),\n        map((response: HttpResponse<IStateMaster[]>) => response.body)\n      )\n      .subscribe((res: IStateMaster[]) => (this.statemasters = res), (res: HttpErrorResponse) => this.onError(res.message));\n    this.countryService\n      .query()\n      .pipe(\n        filter((mayBeOk: HttpResponse<ICountry[]>) => mayBeOk.ok),\n        map((response: HttpResponse<ICountry[]>) => response.body)\n      )\n      .subscribe((res: ICountry[]) => (this.countries = res), (res: HttpErrorResponse) => this.onError(res.message));\n    this.groupMembersService\n      .query()\n      .pipe(\n        filter((mayBeOk: HttpResponse<IGroupMembers[]>) => mayBeOk.ok),\n        map((response: HttpResponse<IGroupMembers[]>) => response.body)\n      )\n      .subscribe((res: IGroupMembers[]) => (this.groupmembers = res), (res: HttpErrorResponse) => this.onError(res.message));\n    this.imEmployeeService\n      .query()\n      .pipe(\n        filter((mayBeOk: HttpResponse<IImEmployee[]>) => mayBeOk.ok),\n        map((response: HttpResponse<IImEmployee[]>) => response.body)\n      )\n      .subscribe((res: IImEmployee[]) => (this.imemployees = res), (res: HttpErrorResponse) => this.onError(res.message));\n  }\n\n  updateForm(userContact: IUserContact) {\n    this.editForm.patchValue({\n      id: userContact.id,\n      homePhone: userContact.homePhone,\n      workPhone: userContact.workPhone,\n      cellPhone: userContact.cellPhone,\n      permentAddress: userContact.permentAddress,\n      haLine1: userContact.haLine1,\n      haLine2: userContact.haLine2,\n      haPostal: userContact.haPostal,\n      waLine1: userContact.waLine1,\n      waLine2: userContact.waLine2,\n      waPostal: userContact.waPostal,\n      ucNote: userContact.ucNote,\n      primaryRole: userContact.primaryRole,\n      secondaryRole: userContact.secondaryRole,\n      initiative: userContact.initiative,\n      technology: userContact.technology,\n      teamName: userContact.teamName,\n      qnowUser: userContact.qnowUser,\n      waCity: userContact.waCity,\n      haCity: userContact.haCity,\n      waState: userContact.waState,\n      haState: userContact.haState,\n      waCountry: userContact.waCountry,\n      haCountry: userContact.haCountry,\n      groupMembers: userContact.groupMembers\n    });\n  }\n\n  previousState() {\n    window.history.back();\n  }\n\n  save() {\n    this.isSaving = true;\n    const userContact = this.createFromForm();\n    if (userContact.id !== undefined) {\n      this.subscribeToSaveResponse(this.userContactService.update(userContact));\n    } else {\n      this.subscribeToSaveResponse(this.userContactService.create(userContact));\n    }\n  }\n\n  private createFromForm(): IUserContact {\n    const entity = {\n      ...new UserContact(),\n      id: this.editForm.get(['id']).value,\n      homePhone: this.editForm.get(['homePhone']).value,\n      workPhone: this.editForm.get(['workPhone']).value,\n      cellPhone: this.editForm.get(['cellPhone']).value,\n      permentAddress: this.editForm.get(['permentAddress']).value,\n      haLine1: this.editForm.get(['haLine1']).value,\n      haLine2: this.editForm.get(['haLine2']).value,\n      haPostal: this.editForm.get(['haPostal']).value,\n      waLine1: this.editForm.get(['waLine1']).value,\n      waLine2: this.editForm.get(['waLine2']).value,\n      waPostal: this.editForm.get(['waPostal']).value,\n      ucNote: this.editForm.get(['ucNote']).value,\n      primaryRole: this.editForm.get(['primaryRole']).value,\n      secondaryRole: this.editForm.get(['secondaryRole']).value,\n      initiative: this.editForm.get(['initiative']).value,\n      technology: this.editForm.get(['technology']).value,\n      teamName: this.editForm.get(['teamName']).value,\n      qnowUser: this.editForm.get(['qnowUser']).value,\n      waCity: this.editForm.get(['waCity']).value,\n      haCity: this.editForm.get(['haCity']).value,\n      waState: this.editForm.get(['waState']).value,\n      haState: this.editForm.get(['haState']).value,\n      waCountry: this.editForm.get(['waCountry']).value,\n      haCountry: this.editForm.get(['haCountry']).value,\n      groupMembers: this.editForm.get(['groupMembers']).value\n    };\n    return entity;\n  }\n\n  protected subscribeToSaveResponse(result: Observable<HttpResponse<IUserContact>>) {\n    result.subscribe((res: HttpResponse<IUserContact>) => this.onSaveSuccess(), (res: HttpErrorResponse) => this.onSaveError());\n  }\n\n  protected onSaveSuccess() {\n    this.isSaving = false;\n    this.previousState();\n  }\n\n  protected onSaveError() {\n    this.isSaving = false;\n  }\n  protected onError(errorMessage: string) {\n    this.jhiAlertService.error(errorMessage, null, null);\n  }\n\n  trackQnowUserById(index: number, item: IQnowUser) {\n    return item.id;\n  }\n\n  trackCityById(index: number, item: ICity) {\n    return item.id;\n  }\n\n  trackStateMasterById(index: number, item: IStateMaster) {\n    return item.id;\n  }\n\n  trackCountryById(index: number, item: ICountry) {\n    return item.id;\n  }\n\n  trackGroupMembersById(index: number, item: IGroupMembers) {\n    return item.id;\n  }\n\n  trackImEmployeeById(index: number, item: IImEmployee) {\n    return item.id;\n  }\n\n  getSelected(selectedVals: Array<any>, option: any) {\n    if (selectedVals) {\n      for (let i = 0; i < selectedVals.length; i++) {\n        if (option.id === selectedVals[i].id) {\n          return selectedVals[i];\n        }\n      }\n    }\n    return option;\n  }\n}\n"]}]}