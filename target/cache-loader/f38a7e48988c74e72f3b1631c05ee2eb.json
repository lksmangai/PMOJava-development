{"remainingRequest":"F:\\25june\\PMQJava\\node_modules\\thread-loader\\dist\\cjs.js??ref--9-2!F:\\25june\\PMQJava\\node_modules\\ts-loader\\index.js??ref--9-3!F:\\25june\\PMQJava\\node_modules\\angular-router-loader\\src\\index.js!F:\\25june\\PMQJava\\node_modules\\tslint-loader\\index.js!F:\\25june\\PMQJava\\src\\main\\webapp\\app\\core\\language\\language.helper.ts","dependencies":[{"path":"F:\\25june\\PMQJava\\src\\main\\webapp\\app\\core\\language\\language.helper.ts","mtime":1561374570079},{"path":"F:\\25june\\PMQJava\\node_modules\\angular2-template-loader\\index.js","mtime":1486570058000},{"path":"F:\\25june\\PMQJava\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\25june\\PMQJava\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\25june\\PMQJava\\node_modules\\ts-loader\\index.js","mtime":1545640398000},{"path":"F:\\25june\\PMQJava\\node_modules\\angular-router-loader\\src\\index.js","mtime":1512749902000},{"path":"F:\\25june\\PMQJava\\node_modules\\tslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst tslib_1 = require(\"tslib\");\r\nvar _a, _b, _c, _d;\r\nconst core_1 = require(\"@angular/core\");\r\nconst platform_browser_1 = require(\"@angular/platform-browser\");\r\nconst router_1 = require(\"@angular/router\");\r\nconst core_2 = require(\"@ngx-translate/core\");\r\nconst rxjs_1 = require(\"rxjs\");\r\nconst language_constants_1 = require(\"app/core/language/language.constants\");\r\nlet JhiLanguageHelper = class JhiLanguageHelper {\r\n    constructor(translateService, titleService, router, rootRenderer) {\r\n        this.translateService = translateService;\r\n        this.titleService = titleService;\r\n        this.router = router;\r\n        this.renderer = null;\r\n        this._language = new rxjs_1.BehaviorSubject(this.translateService.currentLang);\r\n        this.renderer = rootRenderer.createRenderer(document.querySelector('html'), null);\r\n        this.init();\r\n    }\r\n    getAll() {\r\n        return Promise.resolve(language_constants_1.LANGUAGES);\r\n    }\r\n    get language() {\r\n        return this._language.asObservable();\r\n    }\r\n    /**\r\n     * Update the window title using params in the following\r\n     * order:\r\n     * 1. titleKey parameter\r\n     * 2. $state.$current.data.pageTitle (current state page title)\r\n     * 3. 'global.title'\r\n     */\r\n    updateTitle(titleKey) {\r\n        if (!titleKey) {\r\n            titleKey = this.getPageTitle(this.router.routerState.snapshot.root);\r\n        }\r\n        this.translateService.get(titleKey).subscribe(title => {\r\n            this.titleService.setTitle(title);\r\n        });\r\n    }\r\n    init() {\r\n        this.translateService.onLangChange.subscribe((event) => {\r\n            this._language.next(this.translateService.currentLang);\r\n            this.renderer.setAttribute(document.querySelector('html'), 'lang', this.translateService.currentLang);\r\n            this.updateTitle();\r\n        });\r\n    }\r\n    getPageTitle(routeSnapshot) {\r\n        let title = routeSnapshot.data && routeSnapshot.data['pageTitle'] ? routeSnapshot.data['pageTitle'] : 'App';\r\n        if (routeSnapshot.firstChild) {\r\n            title = this.getPageTitle(routeSnapshot.firstChild) || title;\r\n        }\r\n        return title;\r\n    }\r\n};\r\nJhiLanguageHelper = tslib_1.__decorate([\r\n    core_1.Injectable({ providedIn: 'root' }),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof core_2.TranslateService !== \"undefined\" && core_2.TranslateService) === \"function\" ? _a : Object, typeof (_b = typeof platform_browser_1.Title !== \"undefined\" && platform_browser_1.Title) === \"function\" ? _b : Object, typeof (_c = typeof router_1.Router !== \"undefined\" && router_1.Router) === \"function\" ? _c : Object, typeof (_d = typeof core_1.RendererFactory2 !== \"undefined\" && core_1.RendererFactory2) === \"function\" ? _d : Object])\r\n], JhiLanguageHelper);\r\nexports.JhiLanguageHelper = JhiLanguageHelper;\r\n",{"version":3,"file":"F:\\25june\\PMQJava\\src\\main\\webapp\\app\\core\\language\\language.helper.ts","sourceRoot":"","sources":["F:\\25june\\PMQJava\\node_modules\\angular-router-loader\\src\\index.js!F:\\25june\\PMQJava\\node_modules\\tslint-loader\\index.js!F:\\25june\\PMQJava\\src\\main\\webapp\\app\\core\\language\\language.helper.ts"],"names":[],"mappings":";;;;AAAA,wCAAwE;AACxE,gEAAkD;AAClD,4CAAiE;AACjE,8CAAwE;AACxE,+BAAmD;AAEnD,6EAAiE;AAGjE,IAAa,iBAAiB,GAA9B,MAAa,iBAAiB;IAI5B,YACU,gBAAkC,EAClC,YAAmB,EACnB,MAAc,EACtB,YAA8B;QAHtB,qBAAgB,GAAhB,gBAAgB,CAAkB;QAClC,iBAAY,GAAZ,YAAY,CAAO;QACnB,WAAM,GAAN,MAAM,CAAQ;QANxB,aAAQ,GAAc,IAAI,CAAC;QASzB,IAAI,CAAC,SAAS,GAAG,IAAI,sBAAe,CAAS,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC;QAChF,IAAI,CAAC,QAAQ,GAAG,YAAY,CAAC,cAAc,CAAC,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC,CAAC;QAClF,IAAI,CAAC,IAAI,EAAE,CAAC;IACd,CAAC;IAED,MAAM;QACJ,OAAO,OAAO,CAAC,OAAO,CAAC,8BAAS,CAAC,CAAC;IACpC,CAAC;IAED,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE,CAAC;IACvC,CAAC;IAED;;;;;;OAMG;IACH,WAAW,CAAC,QAAiB;QAC3B,IAAI,CAAC,QAAQ,EAAE;YACb,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;SACrE;QAED,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE;YACpD,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,IAAI;QACV,IAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,KAAsB,EAAE,EAAE;YACtE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC;YACvD,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,EAAE,MAAM,EAAE,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC;YACtG,IAAI,CAAC,WAAW,EAAE,CAAC;QACrB,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,YAAY,CAAC,aAAqC;QACxD,IAAI,KAAK,GAAW,aAAa,CAAC,IAAI,IAAI,aAAa,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;QACpH,IAAI,aAAa,CAAC,UAAU,EAAE;YAC5B,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,UAAU,CAAC,IAAI,KAAK,CAAC;SAC9D;QACD,OAAO,KAAK,CAAC;IACf,CAAC;CACF,CAAA;AAvDY,iBAAiB;IAD7B,iBAAU,CAAC,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC;iEAML,uBAAgB,oBAAhB,uBAAgB,oDACpB,wBAAK,oBAAL,wBAAK,oDACX,eAAM,oBAAN,eAAM,oDACR,uBAAgB,oBAAhB,uBAAgB;GARrB,iBAAiB,CAuD7B;AAvDY,8CAAiB","sourcesContent":["import { Injectable, RendererFactory2, Renderer2 } from '@angular/core';\nimport { Title } from '@angular/platform-browser';\nimport { Router, ActivatedRouteSnapshot } from '@angular/router';\nimport { TranslateService, LangChangeEvent } from '@ngx-translate/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\nimport { LANGUAGES } from 'app/core/language/language.constants';\n\n@Injectable({ providedIn: 'root' })\nexport class JhiLanguageHelper {\n  renderer: Renderer2 = null;\n  private _language: BehaviorSubject<string>;\n\n  constructor(\n    private translateService: TranslateService,\n    private titleService: Title,\n    private router: Router,\n    rootRenderer: RendererFactory2\n  ) {\n    this._language = new BehaviorSubject<string>(this.translateService.currentLang);\n    this.renderer = rootRenderer.createRenderer(document.querySelector('html'), null);\n    this.init();\n  }\n\n  getAll(): Promise<any> {\n    return Promise.resolve(LANGUAGES);\n  }\n\n  get language(): Observable<string> {\n    return this._language.asObservable();\n  }\n\n  /**\n   * Update the window title using params in the following\n   * order:\n   * 1. titleKey parameter\n   * 2. $state.$current.data.pageTitle (current state page title)\n   * 3. 'global.title'\n   */\n  updateTitle(titleKey?: string) {\n    if (!titleKey) {\n      titleKey = this.getPageTitle(this.router.routerState.snapshot.root);\n    }\n\n    this.translateService.get(titleKey).subscribe(title => {\n      this.titleService.setTitle(title);\n    });\n  }\n\n  private init() {\n    this.translateService.onLangChange.subscribe((event: LangChangeEvent) => {\n      this._language.next(this.translateService.currentLang);\n      this.renderer.setAttribute(document.querySelector('html'), 'lang', this.translateService.currentLang);\n      this.updateTitle();\n    });\n  }\n\n  private getPageTitle(routeSnapshot: ActivatedRouteSnapshot) {\n    let title: string = routeSnapshot.data && routeSnapshot.data['pageTitle'] ? routeSnapshot.data['pageTitle'] : 'App';\n    if (routeSnapshot.firstChild) {\n      title = this.getPageTitle(routeSnapshot.firstChild) || title;\n    }\n    return title;\n  }\n}\n"]}]}