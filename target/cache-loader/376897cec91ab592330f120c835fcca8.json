{"remainingRequest":"F:\\25june\\PMQJava\\node_modules\\thread-loader\\dist\\cjs.js??ref--9-2!F:\\25june\\PMQJava\\node_modules\\ts-loader\\index.js??ref--9-3!F:\\25june\\PMQJava\\node_modules\\angular-router-loader\\src\\index.js!F:\\25june\\PMQJava\\node_modules\\tslint-loader\\index.js!F:\\25june\\PMQJava\\src\\main\\webapp\\app\\blocks\\interceptor\\errorhandler.interceptor.ts","dependencies":[{"path":"F:\\25june\\PMQJava\\src\\main\\webapp\\app\\blocks\\interceptor\\errorhandler.interceptor.ts","mtime":1561374552290},{"path":"F:\\25june\\PMQJava\\node_modules\\angular2-template-loader\\index.js","mtime":1486570058000},{"path":"F:\\25june\\PMQJava\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\25june\\PMQJava\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\25june\\PMQJava\\node_modules\\ts-loader\\index.js","mtime":1545640398000},{"path":"F:\\25june\\PMQJava\\node_modules\\angular-router-loader\\src\\index.js","mtime":1512749902000},{"path":"F:\\25june\\PMQJava\\node_modules\\tslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst tslib_1 = require(\"tslib\");\r\nvar _a;\r\nconst core_1 = require(\"@angular/core\");\r\nconst ng_jhipster_1 = require(\"ng-jhipster\");\r\nconst http_1 = require(\"@angular/common/http\");\r\nconst operators_1 = require(\"rxjs/operators\");\r\nlet ErrorHandlerInterceptor = class ErrorHandlerInterceptor {\r\n    constructor(eventManager) {\r\n        this.eventManager = eventManager;\r\n    }\r\n    intercept(request, next) {\r\n        return next.handle(request).pipe(operators_1.tap((event) => { }, (err) => {\r\n            if (err instanceof http_1.HttpErrorResponse) {\r\n                if (!(err.status === 401 && (err.message === '' || (err.url && err.url.includes('/api/account'))))) {\r\n                    this.eventManager.broadcast({ name: 'App.httpError', content: err });\r\n                }\r\n            }\r\n        }));\r\n    }\r\n};\r\nErrorHandlerInterceptor = tslib_1.__decorate([\r\n    core_1.Injectable(),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof ng_jhipster_1.JhiEventManager !== \"undefined\" && ng_jhipster_1.JhiEventManager) === \"function\" ? _a : Object])\r\n], ErrorHandlerInterceptor);\r\nexports.ErrorHandlerInterceptor = ErrorHandlerInterceptor;\r\n",{"version":3,"file":"F:\\25june\\PMQJava\\src\\main\\webapp\\app\\blocks\\interceptor\\errorhandler.interceptor.ts","sourceRoot":"","sources":["F:\\25june\\PMQJava\\node_modules\\angular-router-loader\\src\\index.js!F:\\25june\\PMQJava\\node_modules\\tslint-loader\\index.js!F:\\25june\\PMQJava\\src\\main\\webapp\\app\\blocks\\interceptor\\errorhandler.interceptor.ts"],"names":[],"mappings":";;;;AAAA,wCAA2C;AAC3C,6CAA8C;AAC9C,+CAA+G;AAE/G,8CAAqC;AAGrC,IAAa,uBAAuB,GAApC,MAAa,uBAAuB;IAClC,YAAoB,YAA6B;QAA7B,iBAAY,GAAZ,YAAY,CAAiB;IAAG,CAAC;IAErD,SAAS,CAAC,OAAyB,EAAE,IAAiB;QACpD,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAC9B,eAAG,CACD,CAAC,KAAqB,EAAE,EAAE,GAAE,CAAC,EAC7B,CAAC,GAAQ,EAAE,EAAE;YACX,IAAI,GAAG,YAAY,wBAAiB,EAAE;gBACpC,IAAI,CAAC,CAAC,GAAG,CAAC,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,EAAE;oBAClG,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,EAAE,IAAI,EAAE,eAAe,EAAE,OAAO,EAAE,GAAG,EAAE,CAAC,CAAC;iBACtE;aACF;QACH,CAAC,CACF,CACF,CAAC;IACJ,CAAC;CACF,CAAA;AAjBY,uBAAuB;IADnC,iBAAU,EAAE;iEAEuB,6BAAe,oBAAf,6BAAe;GADtC,uBAAuB,CAiBnC;AAjBY,0DAAuB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { JhiEventManager } from 'ng-jhipster';\nimport { HttpInterceptor, HttpRequest, HttpErrorResponse, HttpHandler, HttpEvent } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable()\nexport class ErrorHandlerInterceptor implements HttpInterceptor {\n  constructor(private eventManager: JhiEventManager) {}\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return next.handle(request).pipe(\n      tap(\n        (event: HttpEvent<any>) => {},\n        (err: any) => {\n          if (err instanceof HttpErrorResponse) {\n            if (!(err.status === 401 && (err.message === '' || (err.url && err.url.includes('/api/account'))))) {\n              this.eventManager.broadcast({ name: 'App.httpError', content: err });\n            }\n          }\n        }\n      )\n    );\n  }\n}\n"]}]}