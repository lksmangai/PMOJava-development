{"remainingRequest":"F:\\25june\\PMQJava\\node_modules\\thread-loader\\dist\\cjs.js??ref--9-2!F:\\25june\\PMQJava\\node_modules\\ts-loader\\index.js??ref--9-3!F:\\25june\\PMQJava\\node_modules\\angular-router-loader\\src\\index.js!F:\\25june\\PMQJava\\node_modules\\tslint-loader\\index.js!F:\\25june\\PMQJava\\src\\main\\webapp\\app\\entities\\im-timesheet\\im-timesheet.service.ts","dependencies":[{"path":"F:\\25june\\PMQJava\\src\\main\\webapp\\app\\entities\\im-timesheet\\im-timesheet.service.ts","mtime":1561379305501},{"path":"F:\\25june\\PMQJava\\node_modules\\angular2-template-loader\\index.js","mtime":1486570058000},{"path":"F:\\25june\\PMQJava\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\25june\\PMQJava\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\25june\\PMQJava\\node_modules\\ts-loader\\index.js","mtime":1545640398000},{"path":"F:\\25june\\PMQJava\\node_modules\\angular-router-loader\\src\\index.js","mtime":1512749902000},{"path":"F:\\25june\\PMQJava\\node_modules\\tslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst tslib_1 = require(\"tslib\");\r\nvar _a;\r\nconst core_1 = require(\"@angular/core\");\r\nconst http_1 = require(\"@angular/common/http\");\r\nconst moment = require(\"moment\");\r\nconst operators_1 = require(\"rxjs/operators\");\r\nconst app_constants_1 = require(\"app/app.constants\");\r\nconst shared_1 = require(\"app/shared\");\r\nlet ImTimesheetService = class ImTimesheetService {\r\n    constructor(http) {\r\n        this.http = http;\r\n        this.resourceUrl = app_constants_1.SERVER_API_URL + 'api/im-timesheets';\r\n    }\r\n    create(imTimesheet) {\r\n        const copy = this.convertDateFromClient(imTimesheet);\r\n        return this.http\r\n            .post(this.resourceUrl, copy, { observe: 'response' })\r\n            .pipe(operators_1.map((res) => this.convertDateFromServer(res)));\r\n    }\r\n    update(imTimesheet) {\r\n        const copy = this.convertDateFromClient(imTimesheet);\r\n        return this.http\r\n            .put(this.resourceUrl, copy, { observe: 'response' })\r\n            .pipe(operators_1.map((res) => this.convertDateFromServer(res)));\r\n    }\r\n    find(id) {\r\n        return this.http\r\n            .get(`${this.resourceUrl}/${id}`, { observe: 'response' })\r\n            .pipe(operators_1.map((res) => this.convertDateFromServer(res)));\r\n    }\r\n    query(req) {\r\n        const options = shared_1.createRequestOption(req);\r\n        return this.http\r\n            .get(this.resourceUrl, { params: options, observe: 'response' })\r\n            .pipe(operators_1.map((res) => this.convertDateArrayFromServer(res)));\r\n    }\r\n    delete(id) {\r\n        return this.http.delete(`${this.resourceUrl}/${id}`, { observe: 'response' });\r\n    }\r\n    convertDateFromClient(imTimesheet) {\r\n        const copy = Object.assign({}, imTimesheet, {\r\n            logdate: imTimesheet.logdate != null && imTimesheet.logdate.isValid() ? imTimesheet.logdate.toJSON() : null\r\n        });\r\n        return copy;\r\n    }\r\n    convertDateFromServer(res) {\r\n        if (res.body) {\r\n            res.body.logdate = res.body.logdate != null ? moment(res.body.logdate) : null;\r\n        }\r\n        return res;\r\n    }\r\n    convertDateArrayFromServer(res) {\r\n        if (res.body) {\r\n            res.body.forEach((imTimesheet) => {\r\n                imTimesheet.logdate = imTimesheet.logdate != null ? moment(imTimesheet.logdate) : null;\r\n            });\r\n        }\r\n        return res;\r\n    }\r\n};\r\nImTimesheetService = tslib_1.__decorate([\r\n    core_1.Injectable({ providedIn: 'root' }),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof http_1.HttpClient !== \"undefined\" && http_1.HttpClient) === \"function\" ? _a : Object])\r\n], ImTimesheetService);\r\nexports.ImTimesheetService = ImTimesheetService;\r\n",{"version":3,"file":"F:\\25june\\PMQJava\\src\\main\\webapp\\app\\entities\\im-timesheet\\im-timesheet.service.ts","sourceRoot":"","sources":["F:\\25june\\PMQJava\\node_modules\\angular-router-loader\\src\\index.js!F:\\25june\\PMQJava\\node_modules\\tslint-loader\\index.js!F:\\25june\\PMQJava\\src\\main\\webapp\\app\\entities\\im-timesheet\\im-timesheet.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport * as moment from 'moment';\nimport { DATE_FORMAT } from 'app/shared/constants/input.constants';\nimport { map } from 'rxjs/operators';\n\nimport { SERVER_API_URL } from 'app/app.constants';\nimport { createRequestOption } from 'app/shared';\nimport { IImTimesheet } from 'app/shared/model/im-timesheet.model';\n\ntype EntityResponseType = HttpResponse<IImTimesheet>;\ntype EntityArrayResponseType = HttpResponse<IImTimesheet[]>;\n\n@Injectable({ providedIn: 'root' })\nexport class ImTimesheetService {\n  public resourceUrl = SERVER_API_URL + 'api/im-timesheets';\n\n  constructor(protected http: HttpClient) {}\n\n  create(imTimesheet: IImTimesheet): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(imTimesheet);\n    return this.http\n      .post<IImTimesheet>(this.resourceUrl, copy, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  update(imTimesheet: IImTimesheet): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(imTimesheet);\n    return this.http\n      .put<IImTimesheet>(this.resourceUrl, copy, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  find(id: number): Observable<EntityResponseType> {\n    return this.http\n      .get<IImTimesheet>(`${this.resourceUrl}/${id}`, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  query(req?: any): Observable<EntityArrayResponseType> {\n    const options = createRequestOption(req);\n    return this.http\n      .get<IImTimesheet[]>(this.resourceUrl, { params: options, observe: 'response' })\n      .pipe(map((res: EntityArrayResponseType) => this.convertDateArrayFromServer(res)));\n  }\n\n  delete(id: number): Observable<HttpResponse<any>> {\n    return this.http.delete<any>(`${this.resourceUrl}/${id}`, { observe: 'response' });\n  }\n\n  protected convertDateFromClient(imTimesheet: IImTimesheet): IImTimesheet {\n    const copy: IImTimesheet = Object.assign({}, imTimesheet, {\n      logdate: imTimesheet.logdate != null && imTimesheet.logdate.isValid() ? imTimesheet.logdate.toJSON() : null\n    });\n    return copy;\n  }\n\n  protected convertDateFromServer(res: EntityResponseType): EntityResponseType {\n    if (res.body) {\n      res.body.logdate = res.body.logdate != null ? moment(res.body.logdate) : null;\n    }\n    return res;\n  }\n\n  protected convertDateArrayFromServer(res: EntityArrayResponseType): EntityArrayResponseType {\n    if (res.body) {\n      res.body.forEach((imTimesheet: IImTimesheet) => {\n        imTimesheet.logdate = imTimesheet.logdate != null ? moment(imTimesheet.logdate) : null;\n      });\n    }\n    return res;\n  }\n}\n"]}]}