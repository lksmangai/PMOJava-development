{"remainingRequest":"F:\\25june\\PMQJava\\node_modules\\thread-loader\\dist\\cjs.js??ref--9-2!F:\\25june\\PMQJava\\node_modules\\ts-loader\\index.js??ref--9-3!F:\\25june\\PMQJava\\node_modules\\angular-router-loader\\src\\index.js!F:\\25june\\PMQJava\\node_modules\\tslint-loader\\index.js!F:\\25june\\PMQJava\\src\\main\\webapp\\app\\core\\auth\\account.service.ts","dependencies":[{"path":"F:\\25june\\PMQJava\\src\\main\\webapp\\app\\core\\auth\\account.service.ts","mtime":1561374572788},{"path":"F:\\25june\\PMQJava\\node_modules\\angular2-template-loader\\index.js","mtime":1486570058000},{"path":"F:\\25june\\PMQJava\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\25june\\PMQJava\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\25june\\PMQJava\\node_modules\\ts-loader\\index.js","mtime":1545640398000},{"path":"F:\\25june\\PMQJava\\node_modules\\angular-router-loader\\src\\index.js","mtime":1512749902000},{"path":"F:\\25june\\PMQJava\\node_modules\\tslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst tslib_1 = require(\"tslib\");\r\nvar _a, _b, _c;\r\nconst core_1 = require(\"@angular/core\");\r\nconst ng_jhipster_1 = require(\"ng-jhipster\");\r\nconst ngx_webstorage_1 = require(\"ngx-webstorage\");\r\nconst http_1 = require(\"@angular/common/http\");\r\nconst rxjs_1 = require(\"rxjs\");\r\nconst app_constants_1 = require(\"app/app.constants\");\r\nlet AccountService = class AccountService {\r\n    constructor(languageService, sessionStorage, http) {\r\n        this.languageService = languageService;\r\n        this.sessionStorage = sessionStorage;\r\n        this.http = http;\r\n        this.authenticated = false;\r\n        this.authenticationState = new rxjs_1.Subject();\r\n    }\r\n    fetch() {\r\n        return this.http.get(app_constants_1.SERVER_API_URL + 'api/account', { observe: 'response' });\r\n    }\r\n    save(account) {\r\n        return this.http.post(app_constants_1.SERVER_API_URL + 'api/account', account, { observe: 'response' });\r\n    }\r\n    authenticate(identity) {\r\n        this.userIdentity = identity;\r\n        this.authenticated = identity !== null;\r\n        this.authenticationState.next(this.userIdentity);\r\n    }\r\n    hasAnyAuthority(authorities) {\r\n        if (!this.authenticated || !this.userIdentity || !this.userIdentity.authorities) {\r\n            return false;\r\n        }\r\n        for (let i = 0; i < authorities.length; i++) {\r\n            if (this.userIdentity.authorities.includes(authorities[i])) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    hasAuthority(authority) {\r\n        if (!this.authenticated) {\r\n            return Promise.resolve(false);\r\n        }\r\n        return this.identity().then(id => {\r\n            return Promise.resolve(id.authorities && id.authorities.includes(authority));\r\n        }, () => {\r\n            return Promise.resolve(false);\r\n        });\r\n    }\r\n    identity(force) {\r\n        if (force) {\r\n            this.userIdentity = undefined;\r\n        }\r\n        // check and see if we have retrieved the userIdentity data from the server.\r\n        // if we have, reuse it by immediately resolving\r\n        if (this.userIdentity) {\r\n            return Promise.resolve(this.userIdentity);\r\n        }\r\n        // retrieve the userIdentity data from the server, update the identity object, and then resolve.\r\n        return this.fetch()\r\n            .toPromise()\r\n            .then(response => {\r\n            const account = response.body;\r\n            if (account) {\r\n                this.userIdentity = account;\r\n                this.authenticated = true;\r\n                // After retrieve the account info, the language will be changed to\r\n                // the user's preferred language configured in the account setting\r\n                if (this.userIdentity.langKey) {\r\n                    const langKey = this.sessionStorage.retrieve('locale') || this.userIdentity.langKey;\r\n                    this.languageService.changeLanguage(langKey);\r\n                }\r\n            }\r\n            else {\r\n                this.userIdentity = null;\r\n                this.authenticated = false;\r\n            }\r\n            this.authenticationState.next(this.userIdentity);\r\n            return this.userIdentity;\r\n        })\r\n            .catch(err => {\r\n            this.userIdentity = null;\r\n            this.authenticated = false;\r\n            this.authenticationState.next(this.userIdentity);\r\n            return null;\r\n        });\r\n    }\r\n    isAuthenticated() {\r\n        return this.authenticated;\r\n    }\r\n    isIdentityResolved() {\r\n        return this.userIdentity !== undefined;\r\n    }\r\n    getAuthenticationState() {\r\n        return this.authenticationState.asObservable();\r\n    }\r\n    getImageUrl() {\r\n        return this.isIdentityResolved() ? this.userIdentity.imageUrl : null;\r\n    }\r\n};\r\nAccountService = tslib_1.__decorate([\r\n    core_1.Injectable({ providedIn: 'root' }),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof ng_jhipster_1.JhiLanguageService !== \"undefined\" && ng_jhipster_1.JhiLanguageService) === \"function\" ? _a : Object, typeof (_b = typeof ngx_webstorage_1.SessionStorageService !== \"undefined\" && ngx_webstorage_1.SessionStorageService) === \"function\" ? _b : Object, typeof (_c = typeof http_1.HttpClient !== \"undefined\" && http_1.HttpClient) === \"function\" ? _c : Object])\r\n], AccountService);\r\nexports.AccountService = AccountService;\r\n",{"version":3,"file":"F:\\25june\\PMQJava\\src\\main\\webapp\\app\\core\\auth\\account.service.ts","sourceRoot":"","sources":["F:\\25june\\PMQJava\\node_modules\\angular-router-loader\\src\\index.js!F:\\25june\\PMQJava\\node_modules\\tslint-loader\\index.js!F:\\25june\\PMQJava\\src\\main\\webapp\\app\\core\\auth\\account.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { JhiLanguageService } from 'ng-jhipster';\nimport { SessionStorageService } from 'ngx-webstorage';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable, Subject } from 'rxjs';\n\nimport { SERVER_API_URL } from 'app/app.constants';\nimport { Account } from 'app/core/user/account.model';\n\n@Injectable({ providedIn: 'root' })\nexport class AccountService {\n  private userIdentity: any;\n  private authenticated = false;\n  private authenticationState = new Subject<any>();\n\n  constructor(private languageService: JhiLanguageService, private sessionStorage: SessionStorageService, private http: HttpClient) {}\n\n  fetch(): Observable<HttpResponse<Account>> {\n    return this.http.get<Account>(SERVER_API_URL + 'api/account', { observe: 'response' });\n  }\n\n  save(account: any): Observable<HttpResponse<any>> {\n    return this.http.post(SERVER_API_URL + 'api/account', account, { observe: 'response' });\n  }\n\n  authenticate(identity) {\n    this.userIdentity = identity;\n    this.authenticated = identity !== null;\n    this.authenticationState.next(this.userIdentity);\n  }\n\n  hasAnyAuthority(authorities: string[]): boolean {\n    if (!this.authenticated || !this.userIdentity || !this.userIdentity.authorities) {\n      return false;\n    }\n\n    for (let i = 0; i < authorities.length; i++) {\n      if (this.userIdentity.authorities.includes(authorities[i])) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  hasAuthority(authority: string): Promise<boolean> {\n    if (!this.authenticated) {\n      return Promise.resolve(false);\n    }\n\n    return this.identity().then(\n      id => {\n        return Promise.resolve(id.authorities && id.authorities.includes(authority));\n      },\n      () => {\n        return Promise.resolve(false);\n      }\n    );\n  }\n\n  identity(force?: boolean): Promise<Account> {\n    if (force) {\n      this.userIdentity = undefined;\n    }\n\n    // check and see if we have retrieved the userIdentity data from the server.\n    // if we have, reuse it by immediately resolving\n    if (this.userIdentity) {\n      return Promise.resolve(this.userIdentity);\n    }\n\n    // retrieve the userIdentity data from the server, update the identity object, and then resolve.\n    return this.fetch()\n      .toPromise()\n      .then(response => {\n        const account: Account = response.body;\n        if (account) {\n          this.userIdentity = account;\n          this.authenticated = true;\n          // After retrieve the account info, the language will be changed to\n          // the user's preferred language configured in the account setting\n          if (this.userIdentity.langKey) {\n            const langKey = this.sessionStorage.retrieve('locale') || this.userIdentity.langKey;\n            this.languageService.changeLanguage(langKey);\n          }\n        } else {\n          this.userIdentity = null;\n          this.authenticated = false;\n        }\n        this.authenticationState.next(this.userIdentity);\n        return this.userIdentity;\n      })\n      .catch(err => {\n        this.userIdentity = null;\n        this.authenticated = false;\n        this.authenticationState.next(this.userIdentity);\n        return null;\n      });\n  }\n\n  isAuthenticated(): boolean {\n    return this.authenticated;\n  }\n\n  isIdentityResolved(): boolean {\n    return this.userIdentity !== undefined;\n  }\n\n  getAuthenticationState(): Observable<any> {\n    return this.authenticationState.asObservable();\n  }\n\n  getImageUrl(): string {\n    return this.isIdentityResolved() ? this.userIdentity.imageUrl : null;\n  }\n}\n"]}]}